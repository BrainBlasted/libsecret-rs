// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::CollectionCreateFlags;
use crate::CollectionFlags;
use crate::Item;
use crate::Service;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use std::pin::Pin;
use std::ptr;

glib::glib_wrapper! {
    pub struct Collection(Object<ffi::SecretCollection, ffi::SecretCollectionClass>) @extends gio::DBusProxy;

    match fn {
        get_type => || ffi::secret_collection_get_type(),
    }
}

impl Collection {
    pub fn new_for_dbus_path_sync<P: IsA<Service>, Q: IsA<gio::Cancellable>>(
        service: Option<&P>,
        collection_path: &str,
        flags: CollectionFlags,
        cancellable: Option<&Q>,
    ) -> Result<Collection, glib::Error> {
        assert_initialized_main_thread!();
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::secret_collection_new_for_dbus_path_sync(
                service.map(|p| p.as_ref()).to_glib_none().0,
                collection_path.to_glib_none().0,
                flags.to_glib(),
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    pub fn create<
        P: IsA<Service>,
        Q: IsA<gio::Cancellable>,
        R: FnOnce(Result<Collection, glib::Error>) + Send + 'static,
    >(
        service: Option<&P>,
        label: &str,
        alias: Option<&str>,
        flags: CollectionCreateFlags,
        cancellable: Option<&Q>,
        callback: R,
    ) {
        assert_initialized_main_thread!();
        let user_data: Box_<R> = Box_::new(callback);
        unsafe extern "C" fn create_trampoline<
            R: FnOnce(Result<Collection, glib::Error>) + Send + 'static,
        >(
            _source_object: *mut glib::gobject_ffi::GObject,
            res: *mut gio::ffi::GAsyncResult,
            user_data: glib::ffi::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let ret = ffi::secret_collection_create_finish(res, &mut error);
            let result = if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<R> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = create_trampoline::<R>;
        unsafe {
            ffi::secret_collection_create(
                service.map(|p| p.as_ref()).to_glib_none().0,
                label.to_glib_none().0,
                alias.to_glib_none().0,
                flags.to_glib(),
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    pub fn create_future<P: IsA<Service> + Clone + 'static>(
        service: Option<&P>,
        label: &str,
        alias: Option<&str>,
        flags: CollectionCreateFlags,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<Collection, glib::Error>> + 'static>>
    {
        skip_assert_initialized!();
        let service = service.map(ToOwned::to_owned);
        let label = String::from(label);
        let alias = alias.map(ToOwned::to_owned);
        Box_::pin(gio::GioFuture::new(&(), move |_obj, send| {
            let cancellable = gio::Cancellable::new();
            Self::create(
                service.as_ref().map(::std::borrow::Borrow::borrow),
                &label,
                alias.as_ref().map(::std::borrow::Borrow::borrow),
                flags,
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }

    pub fn create_sync<P: IsA<Service>, Q: IsA<gio::Cancellable>>(
        service: Option<&P>,
        label: &str,
        alias: Option<&str>,
        flags: CollectionCreateFlags,
        cancellable: Option<&Q>,
    ) -> Result<Collection, glib::Error> {
        assert_initialized_main_thread!();
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::secret_collection_create_sync(
                service.map(|p| p.as_ref()).to_glib_none().0,
                label.to_glib_none().0,
                alias.to_glib_none().0,
                flags.to_glib(),
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    pub fn for_alias<
        P: IsA<Service>,
        Q: IsA<gio::Cancellable>,
        R: FnOnce(Result<Collection, glib::Error>) + Send + 'static,
    >(
        service: Option<&P>,
        alias: &str,
        flags: CollectionFlags,
        cancellable: Option<&Q>,
        callback: R,
    ) {
        assert_initialized_main_thread!();
        let user_data: Box_<R> = Box_::new(callback);
        unsafe extern "C" fn for_alias_trampoline<
            R: FnOnce(Result<Collection, glib::Error>) + Send + 'static,
        >(
            _source_object: *mut glib::gobject_ffi::GObject,
            res: *mut gio::ffi::GAsyncResult,
            user_data: glib::ffi::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let ret = ffi::secret_collection_for_alias_finish(res, &mut error);
            let result = if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<R> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = for_alias_trampoline::<R>;
        unsafe {
            ffi::secret_collection_for_alias(
                service.map(|p| p.as_ref()).to_glib_none().0,
                alias.to_glib_none().0,
                flags.to_glib(),
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    pub fn for_alias_future<P: IsA<Service> + Clone + 'static>(
        service: Option<&P>,
        alias: &str,
        flags: CollectionFlags,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<Collection, glib::Error>> + 'static>>
    {
        skip_assert_initialized!();
        let service = service.map(ToOwned::to_owned);
        let alias = String::from(alias);
        Box_::pin(gio::GioFuture::new(&(), move |_obj, send| {
            let cancellable = gio::Cancellable::new();
            Self::for_alias(
                service.as_ref().map(::std::borrow::Borrow::borrow),
                &alias,
                flags,
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }

    pub fn for_alias_sync<P: IsA<Service>, Q: IsA<gio::Cancellable>>(
        service: Option<&P>,
        alias: &str,
        flags: CollectionFlags,
        cancellable: Option<&Q>,
    ) -> Result<Collection, glib::Error> {
        assert_initialized_main_thread!();
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::secret_collection_for_alias_sync(
                service.map(|p| p.as_ref()).to_glib_none().0,
                alias.to_glib_none().0,
                flags.to_glib(),
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    pub fn new_for_dbus_path<
        P: IsA<Service>,
        Q: IsA<gio::Cancellable>,
        R: FnOnce(Result<Collection, glib::Error>) + Send + 'static,
    >(
        service: Option<&P>,
        collection_path: &str,
        flags: CollectionFlags,
        cancellable: Option<&Q>,
        callback: R,
    ) {
        assert_initialized_main_thread!();
        let user_data: Box_<R> = Box_::new(callback);
        unsafe extern "C" fn new_for_dbus_path_trampoline<
            R: FnOnce(Result<Collection, glib::Error>) + Send + 'static,
        >(
            _source_object: *mut glib::gobject_ffi::GObject,
            res: *mut gio::ffi::GAsyncResult,
            user_data: glib::ffi::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let ret = ffi::secret_collection_new_for_dbus_path_finish(res, &mut error);
            let result = if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<R> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = new_for_dbus_path_trampoline::<R>;
        unsafe {
            ffi::secret_collection_new_for_dbus_path(
                service.map(|p| p.as_ref()).to_glib_none().0,
                collection_path.to_glib_none().0,
                flags.to_glib(),
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    pub fn new_for_dbus_path_future<P: IsA<Service> + Clone + 'static>(
        service: Option<&P>,
        collection_path: &str,
        flags: CollectionFlags,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<Collection, glib::Error>> + 'static>>
    {
        skip_assert_initialized!();
        let service = service.map(ToOwned::to_owned);
        let collection_path = String::from(collection_path);
        Box_::pin(gio::GioFuture::new(&(), move |_obj, send| {
            let cancellable = gio::Cancellable::new();
            Self::new_for_dbus_path(
                service.as_ref().map(::std::borrow::Borrow::borrow),
                &collection_path,
                flags,
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }
}

pub const NONE_COLLECTION: Option<&Collection> = None;

pub trait CollectionExt: 'static {
    fn delete<P: IsA<gio::Cancellable>, Q: FnOnce(Result<(), glib::Error>) + Send + 'static>(
        &self,
        cancellable: Option<&P>,
        callback: Q,
    );

    fn delete_future(
        &self,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>>;

    fn delete_sync<P: IsA<gio::Cancellable>>(
        &self,
        cancellable: Option<&P>,
    ) -> Result<(), glib::Error>;

    fn get_created(&self) -> u64;

    fn get_flags(&self) -> CollectionFlags;

    fn get_items(&self) -> Vec<Item>;

    fn get_label(&self) -> Option<glib::GString>;

    fn get_locked(&self) -> bool;

    fn get_modified(&self) -> u64;

    fn get_service(&self) -> Option<Service>;

    fn load_items<P: IsA<gio::Cancellable>, Q: FnOnce(Result<(), glib::Error>) + Send + 'static>(
        &self,
        cancellable: Option<&P>,
        callback: Q,
    );

    fn load_items_future(
        &self,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>>;

    fn load_items_sync<P: IsA<gio::Cancellable>>(
        &self,
        cancellable: Option<&P>,
    ) -> Result<(), glib::Error>;

    fn refresh(&self);

    //fn search<P: IsA<gio::Cancellable>, Q: FnOnce(Result<Vec<Item>, glib::Error>) + Send + 'static>(&self, schema: Option<&Schema>, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, flags: SearchFlags, cancellable: Option<&P>, callback: Q);

    //
    //fn search_future(&self, schema: Option<&Schema>, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, flags: SearchFlags) -> Pin<Box_<dyn std::future::Future<Output = Result<Vec<Item>, glib::Error>> + 'static>>;

    //fn search_for_dbus_paths<P: IsA<gio::Cancellable>, Q: FnOnce(Result<Vec<glib::GString>, glib::Error>) + Send + 'static>(&self, schema: Option<&Schema>, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, cancellable: Option<&P>, callback: Q);

    //
    //fn search_for_dbus_paths_future(&self, schema: Option<&Schema>, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }) -> Pin<Box_<dyn std::future::Future<Output = Result<Vec<glib::GString>, glib::Error>> + 'static>>;

    //fn search_for_dbus_paths_sync<P: IsA<gio::Cancellable>>(&self, schema: Option<&Schema>, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, cancellable: Option<&P>) -> Result<Vec<glib::GString>, glib::Error>;

    //fn search_sync<P: IsA<gio::Cancellable>>(&self, schema: Option<&Schema>, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, flags: SearchFlags, cancellable: Option<&P>) -> Result<Vec<Item>, glib::Error>;

    fn set_label<P: IsA<gio::Cancellable>, Q: FnOnce(Result<(), glib::Error>) + Send + 'static>(
        &self,
        label: &str,
        cancellable: Option<&P>,
        callback: Q,
    );

    fn set_label_future(
        &self,
        label: &str,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>>;

    fn set_label_sync<P: IsA<gio::Cancellable>>(
        &self,
        label: &str,
        cancellable: Option<&P>,
    ) -> Result<(), glib::Error>;

    fn set_property_created(&self, created: u64);

    fn set_property_modified(&self, modified: u64);

    fn connect_property_created_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_label_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_locked_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_modified_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Collection>> CollectionExt for O {
    fn delete<P: IsA<gio::Cancellable>, Q: FnOnce(Result<(), glib::Error>) + Send + 'static>(
        &self,
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn delete_trampoline<
            Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
        >(
            _source_object: *mut glib::gobject_ffi::GObject,
            res: *mut gio::ffi::GAsyncResult,
            user_data: glib::ffi::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let _ = ffi::secret_collection_delete_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = delete_trampoline::<Q>;
        unsafe {
            ffi::secret_collection_delete(
                self.as_ref().to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    fn delete_future(
        &self,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.delete(Some(&cancellable), move |res| {
                send.resolve(res);
            });

            cancellable
        }))
    }

    fn delete_sync<P: IsA<gio::Cancellable>>(
        &self,
        cancellable: Option<&P>,
    ) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::secret_collection_delete_sync(
                self.as_ref().to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn get_created(&self) -> u64 {
        unsafe { ffi::secret_collection_get_created(self.as_ref().to_glib_none().0) }
    }

    fn get_flags(&self) -> CollectionFlags {
        unsafe {
            from_glib(ffi::secret_collection_get_flags(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_items(&self) -> Vec<Item> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::secret_collection_get_items(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_label(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::secret_collection_get_label(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_locked(&self) -> bool {
        unsafe {
            from_glib(ffi::secret_collection_get_locked(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_modified(&self) -> u64 {
        unsafe { ffi::secret_collection_get_modified(self.as_ref().to_glib_none().0) }
    }

    fn get_service(&self) -> Option<Service> {
        unsafe {
            from_glib_none(ffi::secret_collection_get_service(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn load_items<P: IsA<gio::Cancellable>, Q: FnOnce(Result<(), glib::Error>) + Send + 'static>(
        &self,
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn load_items_trampoline<
            Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
        >(
            _source_object: *mut glib::gobject_ffi::GObject,
            res: *mut gio::ffi::GAsyncResult,
            user_data: glib::ffi::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let _ =
                ffi::secret_collection_load_items_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = load_items_trampoline::<Q>;
        unsafe {
            ffi::secret_collection_load_items(
                self.as_ref().to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    fn load_items_future(
        &self,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.load_items(Some(&cancellable), move |res| {
                send.resolve(res);
            });

            cancellable
        }))
    }

    fn load_items_sync<P: IsA<gio::Cancellable>>(
        &self,
        cancellable: Option<&P>,
    ) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::secret_collection_load_items_sync(
                self.as_ref().to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn refresh(&self) {
        unsafe {
            ffi::secret_collection_refresh(self.as_ref().to_glib_none().0);
        }
    }

    //fn search<P: IsA<gio::Cancellable>, Q: FnOnce(Result<Vec<Item>, glib::Error>) + Send + 'static>(&self, schema: Option<&Schema>, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, flags: SearchFlags, cancellable: Option<&P>, callback: Q) {
    //    unsafe { TODO: call ffi:secret_collection_search() }
    //}

    //
    //fn search_future(&self, schema: Option<&Schema>, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, flags: SearchFlags) -> Pin<Box_<dyn std::future::Future<Output = Result<Vec<Item>, glib::Error>> + 'static>> {

    //let schema = schema.map(ToOwned::to_owned);
    //Box_::pin(gio::GioFuture::new(self, move |obj, send| {
    //    let cancellable = gio::Cancellable::new();
    //    obj.search(
    //        schema.as_ref().map(::std::borrow::Borrow::borrow),
    //        attributes,
    //        flags,
    //        Some(&cancellable),
    //        move |res| {
    //            send.resolve(res);
    //        },
    //    );

    //    cancellable
    //}))
    //}

    //fn search_for_dbus_paths<P: IsA<gio::Cancellable>, Q: FnOnce(Result<Vec<glib::GString>, glib::Error>) + Send + 'static>(&self, schema: Option<&Schema>, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, cancellable: Option<&P>, callback: Q) {
    //    unsafe { TODO: call ffi:secret_collection_search_for_dbus_paths() }
    //}

    //
    //fn search_for_dbus_paths_future(&self, schema: Option<&Schema>, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }) -> Pin<Box_<dyn std::future::Future<Output = Result<Vec<glib::GString>, glib::Error>> + 'static>> {

    //let schema = schema.map(ToOwned::to_owned);
    //Box_::pin(gio::GioFuture::new(self, move |obj, send| {
    //    let cancellable = gio::Cancellable::new();
    //    obj.search_for_dbus_paths(
    //        schema.as_ref().map(::std::borrow::Borrow::borrow),
    //        attributes,
    //        Some(&cancellable),
    //        move |res| {
    //            send.resolve(res);
    //        },
    //    );

    //    cancellable
    //}))
    //}

    //fn search_for_dbus_paths_sync<P: IsA<gio::Cancellable>>(&self, schema: Option<&Schema>, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, cancellable: Option<&P>) -> Result<Vec<glib::GString>, glib::Error> {
    //    unsafe { TODO: call ffi:secret_collection_search_for_dbus_paths_sync() }
    //}

    //fn search_sync<P: IsA<gio::Cancellable>>(&self, schema: Option<&Schema>, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, flags: SearchFlags, cancellable: Option<&P>) -> Result<Vec<Item>, glib::Error> {
    //    unsafe { TODO: call ffi:secret_collection_search_sync() }
    //}

    fn set_label<P: IsA<gio::Cancellable>, Q: FnOnce(Result<(), glib::Error>) + Send + 'static>(
        &self,
        label: &str,
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn set_label_trampoline<
            Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
        >(
            _source_object: *mut glib::gobject_ffi::GObject,
            res: *mut gio::ffi::GAsyncResult,
            user_data: glib::ffi::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let _ =
                ffi::secret_collection_set_label_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = set_label_trampoline::<Q>;
        unsafe {
            ffi::secret_collection_set_label(
                self.as_ref().to_glib_none().0,
                label.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    fn set_label_future(
        &self,
        label: &str,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {
        let label = String::from(label);
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.set_label(&label, Some(&cancellable), move |res| {
                send.resolve(res);
            });

            cancellable
        }))
    }

    fn set_label_sync<P: IsA<gio::Cancellable>>(
        &self,
        label: &str,
        cancellable: Option<&P>,
    ) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::secret_collection_set_label_sync(
                self.as_ref().to_glib_none().0,
                label.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn set_property_created(&self, created: u64) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut glib::gobject_ffi::GObject,
                b"created\0".as_ptr() as *const _,
                glib::Value::from(&created).to_glib_none().0,
            );
        }
    }

    fn set_property_modified(&self, modified: u64) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut glib::gobject_ffi::GObject,
                b"modified\0".as_ptr() as *const _,
                glib::Value::from(&modified).to_glib_none().0,
            );
        }
    }

    fn connect_property_created_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_created_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut ffi::SecretCollection,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) where
            P: IsA<Collection>,
        {
            let f: &F = &*(f as *const F);
            f(&Collection::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::created\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_created_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_label_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_label_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut ffi::SecretCollection,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) where
            P: IsA<Collection>,
        {
            let f: &F = &*(f as *const F);
            f(&Collection::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::label\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_label_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_locked_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_locked_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut ffi::SecretCollection,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) where
            P: IsA<Collection>,
        {
            let f: &F = &*(f as *const F);
            f(&Collection::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::locked\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_locked_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_modified_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_modified_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut ffi::SecretCollection,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) where
            P: IsA<Collection>,
        {
            let f: &F = &*(f as *const F);
            f(&Collection::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::modified\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_modified_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for Collection {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Collection")
    }
}
