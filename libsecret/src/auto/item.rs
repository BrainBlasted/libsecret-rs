// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::ItemFlags;
use crate::Retrievable;
use crate::Service;
use crate::Value;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use std::pin::Pin;
use std::ptr;

glib::glib_wrapper! {
    pub struct Item(Object<ffi::SecretItem, ffi::SecretItemClass>) @extends gio::DBusProxy, @implements Retrievable;

    match fn {
        get_type => || ffi::secret_item_get_type(),
    }
}

impl Item {
    #[doc(alias = "secret_item_new_for_dbus_path_sync")]
    pub fn new_for_dbus_path_sync<P: IsA<Service>, Q: IsA<gio::Cancellable>>(
        service: Option<&P>,
        item_path: &str,
        flags: ItemFlags,
        cancellable: Option<&Q>,
    ) -> Result<Item, glib::Error> {
        assert_initialized_main_thread!();
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::secret_item_new_for_dbus_path_sync(
                service.map(|p| p.as_ref()).to_glib_none().0,
                item_path.to_glib_none().0,
                flags.to_glib(),
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    //#[doc(alias = "secret_item_create")]
    //pub fn create<P: IsA<Collection>, Q: IsA<gio::Cancellable>, R: FnOnce(Result<Item, glib::Error>) + Send + 'static>(collection: &P, schema: Option<&Schema>, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, label: &str, value: &Value, flags: ItemCreateFlags, cancellable: Option<&Q>, callback: R) {
    //    unsafe { TODO: call ffi:secret_item_create() }
    //}

    //
    //pub fn create_future<P: IsA<Collection> + Clone + 'static>(collection: &P, schema: Option<&Schema>, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, label: &str, value: &Value, flags: ItemCreateFlags) -> Pin<Box_<dyn std::future::Future<Output = Result<Item, glib::Error>> + 'static>> {

    //skip_assert_initialized!();
    //let collection = collection.clone();
    //let schema = schema.map(ToOwned::to_owned);
    //let label = String::from(label);
    //let value = value.clone();
    //Box_::pin(gio::GioFuture::new(&(), move |_obj, send| {
    //    let cancellable = gio::Cancellable::new();
    //    Self::create(
    //        &collection,
    //        schema.as_ref().map(::std::borrow::Borrow::borrow),
    //        attributes,
    //        &label,
    //        &value,
    //        flags,
    //        Some(&cancellable),
    //        move |res| {
    //            send.resolve(res);
    //        },
    //    );

    //    cancellable
    //}))
    //}

    //#[doc(alias = "secret_item_create_sync")]
    //pub fn create_sync<P: IsA<Collection>, Q: IsA<gio::Cancellable>>(collection: &P, schema: Option<&Schema>, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, label: &str, value: &Value, flags: ItemCreateFlags, cancellable: Option<&Q>) -> Result<Item, glib::Error> {
    //    unsafe { TODO: call ffi:secret_item_create_sync() }
    //}

    #[doc(alias = "secret_item_load_secrets")]
    pub fn load_secrets<
        P: IsA<gio::Cancellable>,
        Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
    >(
        items: &[Item],
        cancellable: Option<&P>,
        callback: Q,
    ) {
        assert_initialized_main_thread!();
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn load_secrets_trampoline<
            Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
        >(
            _source_object: *mut glib::gobject_ffi::GObject,
            res: *mut gio::ffi::GAsyncResult,
            user_data: glib::ffi::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let _ = ffi::secret_item_load_secrets_finish(res, &mut error);
            let result = if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = load_secrets_trampoline::<Q>;
        unsafe {
            ffi::secret_item_load_secrets(
                items.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    pub fn load_secrets_future(
        items: &[Item],
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {
        skip_assert_initialized!();
        let items = items.clone();
        Box_::pin(gio::GioFuture::new(&(), move |_obj, send| {
            let cancellable = gio::Cancellable::new();
            Self::load_secrets(&items, Some(&cancellable), move |res| {
                send.resolve(res);
            });

            cancellable
        }))
    }

    #[doc(alias = "secret_item_load_secrets_sync")]
    pub fn load_secrets_sync<P: IsA<gio::Cancellable>>(
        items: &[Item],
        cancellable: Option<&P>,
    ) -> Result<(), glib::Error> {
        assert_initialized_main_thread!();
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::secret_item_load_secrets_sync(
                items.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[doc(alias = "secret_item_new_for_dbus_path")]
    pub fn new_for_dbus_path<
        P: IsA<Service>,
        Q: IsA<gio::Cancellable>,
        R: FnOnce(Result<Item, glib::Error>) + Send + 'static,
    >(
        service: Option<&P>,
        item_path: &str,
        flags: ItemFlags,
        cancellable: Option<&Q>,
        callback: R,
    ) {
        assert_initialized_main_thread!();
        let user_data: Box_<R> = Box_::new(callback);
        unsafe extern "C" fn new_for_dbus_path_trampoline<
            R: FnOnce(Result<Item, glib::Error>) + Send + 'static,
        >(
            _source_object: *mut glib::gobject_ffi::GObject,
            res: *mut gio::ffi::GAsyncResult,
            user_data: glib::ffi::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let ret = ffi::secret_item_new_for_dbus_path_finish(res, &mut error);
            let result = if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<R> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = new_for_dbus_path_trampoline::<R>;
        unsafe {
            ffi::secret_item_new_for_dbus_path(
                service.map(|p| p.as_ref()).to_glib_none().0,
                item_path.to_glib_none().0,
                flags.to_glib(),
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    pub fn new_for_dbus_path_future<P: IsA<Service> + Clone + 'static>(
        service: Option<&P>,
        item_path: &str,
        flags: ItemFlags,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<Item, glib::Error>> + 'static>> {
        skip_assert_initialized!();
        let service = service.map(ToOwned::to_owned);
        let item_path = String::from(item_path);
        Box_::pin(gio::GioFuture::new(&(), move |_obj, send| {
            let cancellable = gio::Cancellable::new();
            Self::new_for_dbus_path(
                service.as_ref().map(::std::borrow::Borrow::borrow),
                &item_path,
                flags,
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }
}

pub const NONE_ITEM: Option<&Item> = None;

pub trait ItemExt: 'static {
    #[doc(alias = "secret_item_delete")]
    fn delete<P: IsA<gio::Cancellable>, Q: FnOnce(Result<(), glib::Error>) + Send + 'static>(
        &self,
        cancellable: Option<&P>,
        callback: Q,
    );

    fn delete_future(
        &self,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>>;

    #[doc(alias = "secret_item_delete_sync")]
    fn delete_sync<P: IsA<gio::Cancellable>>(
        &self,
        cancellable: Option<&P>,
    ) -> Result<(), glib::Error>;

    #[doc(alias = "secret_item_get_flags")]
    fn get_flags(&self) -> ItemFlags;

    #[doc(alias = "secret_item_get_locked")]
    fn get_locked(&self) -> bool;

    #[doc(alias = "secret_item_get_schema_name")]
    fn get_schema_name(&self) -> Option<glib::GString>;

    #[doc(alias = "secret_item_get_secret")]
    fn get_secret(&self) -> Option<Value>;

    #[doc(alias = "secret_item_get_service")]
    fn get_service(&self) -> Option<Service>;

    #[doc(alias = "secret_item_load_secret")]
    fn load_secret<P: IsA<gio::Cancellable>, Q: FnOnce(Result<(), glib::Error>) + Send + 'static>(
        &self,
        cancellable: Option<&P>,
        callback: Q,
    );

    fn load_secret_future(
        &self,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>>;

    #[doc(alias = "secret_item_load_secret_sync")]
    fn load_secret_sync<P: IsA<gio::Cancellable>>(
        &self,
        cancellable: Option<&P>,
    ) -> Result<(), glib::Error>;

    #[doc(alias = "secret_item_refresh")]
    fn refresh(&self);

    //#[doc(alias = "secret_item_set_attributes")]
    //fn set_attributes<P: IsA<gio::Cancellable>, Q: FnOnce(Result<(), glib::Error>) + Send + 'static>(&self, schema: Option<&Schema>, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, cancellable: Option<&P>, callback: Q);

    //
    //fn set_attributes_future(&self, schema: Option<&Schema>, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>>;

    //#[doc(alias = "secret_item_set_attributes_sync")]
    //fn set_attributes_sync<P: IsA<gio::Cancellable>>(&self, schema: Option<&Schema>, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, cancellable: Option<&P>) -> Result<(), glib::Error>;

    #[doc(alias = "secret_item_set_label")]
    fn set_label<P: IsA<gio::Cancellable>, Q: FnOnce(Result<(), glib::Error>) + Send + 'static>(
        &self,
        label: &str,
        cancellable: Option<&P>,
        callback: Q,
    );

    fn set_label_future(
        &self,
        label: &str,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>>;

    #[doc(alias = "secret_item_set_label_sync")]
    fn set_label_sync<P: IsA<gio::Cancellable>>(
        &self,
        label: &str,
        cancellable: Option<&P>,
    ) -> Result<(), glib::Error>;

    #[doc(alias = "secret_item_set_secret")]
    fn set_secret<P: IsA<gio::Cancellable>, Q: FnOnce(Result<(), glib::Error>) + Send + 'static>(
        &self,
        value: &Value,
        cancellable: Option<&P>,
        callback: Q,
    );

    fn set_secret_future(
        &self,
        value: &Value,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>>;

    #[doc(alias = "secret_item_set_secret_sync")]
    fn set_secret_sync<P: IsA<gio::Cancellable>>(
        &self,
        value: &Value,
        cancellable: Option<&P>,
    ) -> Result<(), glib::Error>;

    fn connect_property_locked_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Item>> ItemExt for O {
    fn delete<P: IsA<gio::Cancellable>, Q: FnOnce(Result<(), glib::Error>) + Send + 'static>(
        &self,
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn delete_trampoline<
            Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
        >(
            _source_object: *mut glib::gobject_ffi::GObject,
            res: *mut gio::ffi::GAsyncResult,
            user_data: glib::ffi::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let _ = ffi::secret_item_delete_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = delete_trampoline::<Q>;
        unsafe {
            ffi::secret_item_delete(
                self.as_ref().to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    fn delete_future(
        &self,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.delete(Some(&cancellable), move |res| {
                send.resolve(res);
            });

            cancellable
        }))
    }

    fn delete_sync<P: IsA<gio::Cancellable>>(
        &self,
        cancellable: Option<&P>,
    ) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::secret_item_delete_sync(
                self.as_ref().to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn get_flags(&self) -> ItemFlags {
        unsafe { from_glib(ffi::secret_item_get_flags(self.as_ref().to_glib_none().0)) }
    }

    fn get_locked(&self) -> bool {
        unsafe { from_glib(ffi::secret_item_get_locked(self.as_ref().to_glib_none().0)) }
    }

    fn get_schema_name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::secret_item_get_schema_name(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_secret(&self) -> Option<Value> {
        unsafe { from_glib_full(ffi::secret_item_get_secret(self.as_ref().to_glib_none().0)) }
    }

    fn get_service(&self) -> Option<Service> {
        unsafe { from_glib_none(ffi::secret_item_get_service(self.as_ref().to_glib_none().0)) }
    }

    fn load_secret<
        P: IsA<gio::Cancellable>,
        Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
    >(
        &self,
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn load_secret_trampoline<
            Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
        >(
            _source_object: *mut glib::gobject_ffi::GObject,
            res: *mut gio::ffi::GAsyncResult,
            user_data: glib::ffi::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let _ = ffi::secret_item_load_secret_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = load_secret_trampoline::<Q>;
        unsafe {
            ffi::secret_item_load_secret(
                self.as_ref().to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    fn load_secret_future(
        &self,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.load_secret(Some(&cancellable), move |res| {
                send.resolve(res);
            });

            cancellable
        }))
    }

    fn load_secret_sync<P: IsA<gio::Cancellable>>(
        &self,
        cancellable: Option<&P>,
    ) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::secret_item_load_secret_sync(
                self.as_ref().to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn refresh(&self) {
        unsafe {
            ffi::secret_item_refresh(self.as_ref().to_glib_none().0);
        }
    }

    //fn set_attributes<P: IsA<gio::Cancellable>, Q: FnOnce(Result<(), glib::Error>) + Send + 'static>(&self, schema: Option<&Schema>, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, cancellable: Option<&P>, callback: Q) {
    //    unsafe { TODO: call ffi:secret_item_set_attributes() }
    //}

    //
    //fn set_attributes_future(&self, schema: Option<&Schema>, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {

    //let schema = schema.map(ToOwned::to_owned);
    //Box_::pin(gio::GioFuture::new(self, move |obj, send| {
    //    let cancellable = gio::Cancellable::new();
    //    obj.set_attributes(
    //        schema.as_ref().map(::std::borrow::Borrow::borrow),
    //        attributes,
    //        Some(&cancellable),
    //        move |res| {
    //            send.resolve(res);
    //        },
    //    );

    //    cancellable
    //}))
    //}

    //fn set_attributes_sync<P: IsA<gio::Cancellable>>(&self, schema: Option<&Schema>, attributes: /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }, cancellable: Option<&P>) -> Result<(), glib::Error> {
    //    unsafe { TODO: call ffi:secret_item_set_attributes_sync() }
    //}

    fn set_label<P: IsA<gio::Cancellable>, Q: FnOnce(Result<(), glib::Error>) + Send + 'static>(
        &self,
        label: &str,
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn set_label_trampoline<
            Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
        >(
            _source_object: *mut glib::gobject_ffi::GObject,
            res: *mut gio::ffi::GAsyncResult,
            user_data: glib::ffi::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let _ = ffi::secret_item_set_label_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = set_label_trampoline::<Q>;
        unsafe {
            ffi::secret_item_set_label(
                self.as_ref().to_glib_none().0,
                label.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    fn set_label_future(
        &self,
        label: &str,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {
        let label = String::from(label);
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.set_label(&label, Some(&cancellable), move |res| {
                send.resolve(res);
            });

            cancellable
        }))
    }

    fn set_label_sync<P: IsA<gio::Cancellable>>(
        &self,
        label: &str,
        cancellable: Option<&P>,
    ) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::secret_item_set_label_sync(
                self.as_ref().to_glib_none().0,
                label.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn set_secret<P: IsA<gio::Cancellable>, Q: FnOnce(Result<(), glib::Error>) + Send + 'static>(
        &self,
        value: &Value,
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn set_secret_trampoline<
            Q: FnOnce(Result<(), glib::Error>) + Send + 'static,
        >(
            _source_object: *mut glib::gobject_ffi::GObject,
            res: *mut gio::ffi::GAsyncResult,
            user_data: glib::ffi::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let _ = ffi::secret_item_set_secret_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = set_secret_trampoline::<Q>;
        unsafe {
            ffi::secret_item_set_secret(
                self.as_ref().to_glib_none().0,
                value.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    fn set_secret_future(
        &self,
        value: &Value,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {
        let value = value.clone();
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.set_secret(&value, Some(&cancellable), move |res| {
                send.resolve(res);
            });

            cancellable
        }))
    }

    fn set_secret_sync<P: IsA<gio::Cancellable>>(
        &self,
        value: &Value,
        cancellable: Option<&P>,
    ) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::secret_item_set_secret_sync(
                self.as_ref().to_glib_none().0,
                value.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn connect_property_locked_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_locked_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut ffi::SecretItem,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) where
            P: IsA<Item>,
        {
            let f: &F = &*(f as *const F);
            f(&Item::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::locked\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_locked_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for Item {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Item")
    }
}
