// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::pin::Pin;
use std::ptr;

glib::glib_wrapper! {
    pub struct Prompt(Object<ffi::SecretPrompt, ffi::SecretPromptClass>) @extends gio::DBusProxy;

    match fn {
        get_type => || ffi::secret_prompt_get_type(),
    }
}

pub const NONE_PROMPT: Option<&Prompt> = None;

pub trait PromptExt: 'static {
    #[doc(alias = "secret_prompt_perform")]
    fn perform<
        P: IsA<gio::Cancellable>,
        Q: FnOnce(Result<glib::Variant, glib::Error>) + Send + 'static,
    >(
        &self,
        window_id: Option<&str>,
        return_type: &glib::VariantTy,
        cancellable: Option<&P>,
        callback: Q,
    );

    fn perform_future(
        &self,
        window_id: Option<&str>,
        return_type: &glib::VariantTy,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<glib::Variant, glib::Error>> + 'static>>;

    #[doc(alias = "secret_prompt_perform_sync")]
    fn perform_sync<P: IsA<gio::Cancellable>>(
        &self,
        window_id: Option<&str>,
        cancellable: Option<&P>,
        return_type: &glib::VariantTy,
    ) -> Result<glib::Variant, glib::Error>;

    #[doc(alias = "secret_prompt_run")]
    fn run<P: IsA<gio::Cancellable>>(
        &self,
        window_id: Option<&str>,
        cancellable: Option<&P>,
        return_type: &glib::VariantTy,
    ) -> Result<glib::Variant, glib::Error>;
}

impl<O: IsA<Prompt>> PromptExt for O {
    fn perform<
        P: IsA<gio::Cancellable>,
        Q: FnOnce(Result<glib::Variant, glib::Error>) + Send + 'static,
    >(
        &self,
        window_id: Option<&str>,
        return_type: &glib::VariantTy,
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn perform_trampoline<
            Q: FnOnce(Result<glib::Variant, glib::Error>) + Send + 'static,
        >(
            _source_object: *mut glib::gobject_ffi::GObject,
            res: *mut gio::ffi::GAsyncResult,
            user_data: glib::ffi::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let ret = ffi::secret_prompt_perform_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = perform_trampoline::<Q>;
        unsafe {
            ffi::secret_prompt_perform(
                self.as_ref().to_glib_none().0,
                window_id.to_glib_none().0,
                return_type.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    fn perform_future(
        &self,
        window_id: Option<&str>,
        return_type: &glib::VariantTy,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<glib::Variant, glib::Error>> + 'static>>
    {
        let window_id = window_id.map(ToOwned::to_owned);
        let return_type = return_type.clone();
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.perform(
                window_id.as_ref().map(::std::borrow::Borrow::borrow),
                &return_type,
                Some(&cancellable),
                move |res| {
                    send.resolve(res);
                },
            );

            cancellable
        }))
    }

    fn perform_sync<P: IsA<gio::Cancellable>>(
        &self,
        window_id: Option<&str>,
        cancellable: Option<&P>,
        return_type: &glib::VariantTy,
    ) -> Result<glib::Variant, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::secret_prompt_perform_sync(
                self.as_ref().to_glib_none().0,
                window_id.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                return_type.to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn run<P: IsA<gio::Cancellable>>(
        &self,
        window_id: Option<&str>,
        cancellable: Option<&P>,
        return_type: &glib::VariantTy,
    ) -> Result<glib::Variant, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::secret_prompt_run(
                self.as_ref().to_glib_none().0,
                window_id.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                return_type.to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }
}

impl fmt::Display for Prompt {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Prompt")
    }
}
