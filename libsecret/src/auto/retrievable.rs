// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::Value;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use std::pin::Pin;
use std::ptr;

glib::glib_wrapper! {
    pub struct Retrievable(Interface<ffi::SecretRetrievable>);

    match fn {
        get_type => || ffi::secret_retrievable_get_type(),
    }
}

pub const NONE_RETRIEVABLE: Option<&Retrievable> = None;

pub trait RetrievableExt: 'static {
    //#[doc(alias = "secret_retrievable_get_attributes")]
    //fn get_attributes(&self) -> /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 };

    #[doc(alias = "secret_retrievable_get_created")]
    fn get_created(&self) -> u64;

    #[doc(alias = "secret_retrievable_get_label")]
    fn get_label(&self) -> Option<glib::GString>;

    #[doc(alias = "secret_retrievable_get_modified")]
    fn get_modified(&self) -> u64;

    #[doc(alias = "secret_retrievable_retrieve_secret")]
    fn retrieve_secret<
        P: IsA<gio::Cancellable>,
        Q: FnOnce(Result<Option<Value>, glib::Error>) + Send + 'static,
    >(
        &self,
        cancellable: Option<&P>,
        callback: Q,
    );

    fn retrieve_secret_future(
        &self,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<Option<Value>, glib::Error>> + 'static>>;

    #[doc(alias = "secret_retrievable_retrieve_secret_sync")]
    fn retrieve_secret_sync<P: IsA<gio::Cancellable>>(
        &self,
        cancellable: Option<&P>,
    ) -> Result<Option<Value>, glib::Error>;

    //fn set_property_attributes(&self, attributes: /*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 });

    fn set_property_created(&self, created: u64);

    fn set_property_label(&self, label: Option<&str>);

    fn set_property_modified(&self, modified: u64);

    fn connect_property_attributes_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_created_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_label_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_modified_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Retrievable>> RetrievableExt for O {
    //fn get_attributes(&self) -> /*Unknown conversion*//*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 } {
    //    unsafe { TODO: call ffi:secret_retrievable_get_attributes() }
    //}

    fn get_created(&self) -> u64 {
        unsafe { ffi::secret_retrievable_get_created(self.as_ref().to_glib_none().0) }
    }

    fn get_label(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::secret_retrievable_get_label(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn get_modified(&self) -> u64 {
        unsafe { ffi::secret_retrievable_get_modified(self.as_ref().to_glib_none().0) }
    }

    fn retrieve_secret<
        P: IsA<gio::Cancellable>,
        Q: FnOnce(Result<Option<Value>, glib::Error>) + Send + 'static,
    >(
        &self,
        cancellable: Option<&P>,
        callback: Q,
    ) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn retrieve_secret_trampoline<
            Q: FnOnce(Result<Option<Value>, glib::Error>) + Send + 'static,
        >(
            _source_object: *mut glib::gobject_ffi::GObject,
            res: *mut gio::ffi::GAsyncResult,
            user_data: glib::ffi::gpointer,
        ) {
            let mut error = ptr::null_mut();
            let ret = ffi::secret_retrievable_retrieve_secret_finish(
                _source_object as *mut _,
                res,
                &mut error,
            );
            let result = if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = retrieve_secret_trampoline::<Q>;
        unsafe {
            ffi::secret_retrievable_retrieve_secret(
                self.as_ref().to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    fn retrieve_secret_future(
        &self,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<Option<Value>, glib::Error>> + 'static>>
    {
        Box_::pin(gio::GioFuture::new(self, move |obj, send| {
            let cancellable = gio::Cancellable::new();
            obj.retrieve_secret(Some(&cancellable), move |res| {
                send.resolve(res);
            });

            cancellable
        }))
    }

    fn retrieve_secret_sync<P: IsA<gio::Cancellable>>(
        &self,
        cancellable: Option<&P>,
    ) -> Result<Option<Value>, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::secret_retrievable_retrieve_secret_sync(
                self.as_ref().to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    //fn set_property_attributes(&self, attributes: /*Unimplemented*/HashTable TypeId { ns_id: 0, id: 28 }/TypeId { ns_id: 0, id: 28 }) {
    //    unsafe {
    //        glib::gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"attributes\0".as_ptr() as *const _, glib::Value::from(&attributes).to_glib_none().0);
    //    }
    //}

    fn set_property_created(&self, created: u64) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut glib::gobject_ffi::GObject,
                b"created\0".as_ptr() as *const _,
                glib::Value::from(&created).to_glib_none().0,
            );
        }
    }

    fn set_property_label(&self, label: Option<&str>) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut glib::gobject_ffi::GObject,
                b"label\0".as_ptr() as *const _,
                glib::Value::from(label).to_glib_none().0,
            );
        }
    }

    fn set_property_modified(&self, modified: u64) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(
                self.to_glib_none().0 as *mut glib::gobject_ffi::GObject,
                b"modified\0".as_ptr() as *const _,
                glib::Value::from(&modified).to_glib_none().0,
            );
        }
    }

    fn connect_property_attributes_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_attributes_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut ffi::SecretRetrievable,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) where
            P: IsA<Retrievable>,
        {
            let f: &F = &*(f as *const F);
            f(&Retrievable::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::attributes\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_attributes_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_created_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_created_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut ffi::SecretRetrievable,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) where
            P: IsA<Retrievable>,
        {
            let f: &F = &*(f as *const F);
            f(&Retrievable::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::created\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_created_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_label_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_label_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut ffi::SecretRetrievable,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) where
            P: IsA<Retrievable>,
        {
            let f: &F = &*(f as *const F);
            f(&Retrievable::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::label\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_label_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_property_modified_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_modified_trampoline<P, F: Fn(&P) + 'static>(
            this: *mut ffi::SecretRetrievable,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) where
            P: IsA<Retrievable>,
        {
            let f: &F = &*(f as *const F);
            f(&Retrievable::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::modified\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_modified_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for Retrievable {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Retrievable")
    }
}
