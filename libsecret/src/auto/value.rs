// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::translate::*;
use std::mem;

glib::glib_wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct Value(Shared<ffi::SecretValue>);

    match fn {
        ref => |ptr| ffi::secret_value_ref(ptr),
        unref => |ptr| ffi::secret_value_unref(ptr),
        get_type => || ffi::secret_value_get_type(),
    }
}

impl Value {
    pub fn new(secret: &str, content_type: &str) -> Value {
        assert_initialized_main_thread!();
        let length = secret.len() as isize;
        unsafe {
            from_glib_full(ffi::secret_value_new(
                secret.to_glib_none().0,
                length,
                content_type.to_glib_none().0,
            ))
        }
    }

    //pub fn new_full(secret: &str, content_type: &str) -> Value {
    //    unsafe { TODO: call ffi:secret_value_new_full() }
    //}

    pub fn get(&self) -> Vec<u8> {
        unsafe {
            let mut length = mem::MaybeUninit::uninit();
            let ret = FromGlibContainer::from_glib_none_num(
                ffi::secret_value_get(self.to_glib_none().0, length.as_mut_ptr()),
                length.assume_init() as usize,
            );
            ret
        }
    }

    pub fn get_content_type(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::secret_value_get_content_type(self.to_glib_none().0)) }
    }

    pub fn get_text(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::secret_value_get_text(self.to_glib_none().0)) }
    }

    pub fn unref_to_password(&self, length: usize) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::secret_value_unref_to_password(
                self.to_glib_none().0,
                length,
            ))
        }
    }
}
